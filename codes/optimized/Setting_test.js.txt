angular.module('hansumApp.Settings')
    /*
     * controller for configuration table 
     */
    .controller('ConfiguratonController', function ($scope, $rootScope, $http, $modal, appURL, ModalService, TransferObject, growl) {

        /* variable used for loader icon till the request is processed*/
        $scope.dataLoaded = false;

        /*variable used for customizing datatable options. this variable is
         *  binded to directive using 'options' attribute in html of table*/

        $scope.options = {
            aoColumns: [{ "bSortable": true }, { "bSortable": false },
            { "bSortable": false }],
            bPaginate: true,
            bInfo: false,
            bLengthChange: false,
            iDisplayLength: 10, // maximum no of rows to be displayed in a page
            aaData: [],
            bjQueryUI: true,
            language: {
                search: "",
                searchPlaceholder: "Search By Any Field",
                zeroRecords: "No matching Parameter found",
            },
            sDom: '<"form-group search"<"input-group"f<"input-group-addon"<"glyphicon glyphicon-search">>>><"dataTableContainer"t><"dataTablePaginateContainer"p>'
        };



        /* success function for the training table API service[getAllTrainings] 
             * which gets the response of network call and do required changes and
             *  inserts the values into datatable* and checks for permissions to 
             *  edit,delete,retrieve and update the UI accordingly*/

        var successConfigurations = function (fullList) {
            /* loader variable is set true once network call returns a response*/

            $scope.dataLoaded = true;
            $scope.fullList = fullList;
            console.log("I'm in GET ALl !!");
            console.log($scope.fullList);

            angular.forEach($scope.fullList, function (object) {

                $scope.options.aaData.push(["<a ng-href=''  tooltip-placement='bottom' tooltip='Edit' class='edit-config' attr='" + object.constant + "'> " + object.constant + " </a>", object.value, "<a ng-href=''  ng-if='" + object.editFlag + "' tooltip-placement='bottom' tooltip='Delete' class='delete-config' attr='" + object.constant + "'><span class='glyphicon glyphicon-trash'></span></a>"]);
            });

        };

        /* error function for the Configuration table API service[getAllTrainings]
         * which displays a error notification  */
        var errorConfigurations = function (data, status, headers, config) {
            /* loader variable is set true once network call error*/
            $scope.dataLoaded = true;
            growl.error("Configuration information can't be loaded!!");
        };

        var populateTableData = function () {
            ConfigurationDataService.getAllTrainings(successConfigurations, errorConfigurations);
        };
        populateTableData();

        /* watches for updates in configuration*/
        $scope.$on('configurationUpdated', function() {
        	populateTableData();	
        });

        /* function which is used for modal service of create Configuration display*/
        $scope.showCreateConfiguration = function () {

            console.log("In the create config modal");

            ModalService.showModal({
                templateUrl: 'app/Settings/createConfiguration.html',
                controller: "createConfigurationController"
            }).then(
                function (modal) {
                    modal.element.modal();
                    modal.close.then(function (result) {
                        $('.modal-backdrop').remove();
                    });
                    modal.element
                        .siblings('.modal-backdrop:not(.fade)')
                        .remove();
                    console.log("at the end of modal block");
                });
        };


        /* function which is used for modal service of editing Configuration display*/
        $scope.editConfig = function (configName) {

            console.log("inside edit config fn");

            $scope.editConfigVariable = configName;

            var loopFlag = true;
            angular.forEach($scope.fullList, function (object) {
                console.log("inside angular for each in edit");

                if (loopFlag) {
                    if (object.constant == configName) {

                        //to display edit modal only for the editable TRUE items as selectred by the users
                        $scope.localEdit = object.editFlag;

                        // console.log($scope.localEdit);
                        loopFlag = false;
                    }
                }
            });

            if ($scope.localEdit) {
                ModalService.showModal({
                    templateUrl: 'app/Settings/editConfiguration.html',
                    controller: "editConfigurationController"
                }).then(
                    function (modal) {
                        modal.element.modal();
                        modal.close.then(function (result) {
                            $('.modal-backdrop').remove();
                        });
                        modal.element
                            .siblings('.modal-backdrop:not(.fade)')
                            .remove();
                        console.log("at the end of modal block");

                    });
            }
            else {
                growl.error("Non Editable Field");
            };

        };

        /* function which is used for modal service of deleting Configuration data*/
        $scope.deleteConfig = function (configName) {

            console.log("inside delete fn");
            // console.log(configName);
            $scope.deleteConfigVariable = configName;
            
            //console.log($scope.deleteConfigVariable);

            ModalService.showModal({
                templateUrl: 'app/Settings/deleteConfiguration.html',
                controller: "deleteConfigurationController"
            }).then(
                function (modal) {
                    modal.element.modal();
                    modal.close.then(function (result) {
                        $('.modal-backdrop').remove();
                    });
                    modal.element
                        .siblings('.modal-backdrop:not(.fade)')
                        .remove();
                    console.log("at the end of modal block");

                });
            //  $rootScope.deleteFn($scope.deleteConfigVariable);

        };

        /* tableData method list
             * it is binded to the directive scope(dataTable-ng)*/
        $scope.tableFunctions = {
            editConfig: $scope.editConfig,
            deleteConfig: $scope.deleteConfig
        };

    })

